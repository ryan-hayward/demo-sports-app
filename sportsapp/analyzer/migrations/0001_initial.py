# Generated by Django 5.0.3 on 2024-03-06 17:29

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AuthGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=150, unique=True)),
            ],
            options={
                "db_table": "auth_group",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthGroupPermissions",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_group_permissions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("codename", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "auth_permission",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("is_superuser", models.BooleanField()),
                ("username", models.CharField(max_length=150, unique=True)),
                ("first_name", models.CharField(max_length=150)),
                ("last_name", models.CharField(max_length=150)),
                ("email", models.CharField(max_length=254)),
                ("is_staff", models.BooleanField()),
                ("is_active", models.BooleanField()),
                ("date_joined", models.DateTimeField()),
            ],
            options={
                "db_table": "auth_user",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUserGroups",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_user_groups",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUserUserPermissions",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_user_user_permissions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Coach",
            fields=[
                (
                    "coachid",
                    models.CharField(
                        db_column="coachID", primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(blank=True, null=True)),
                ("start_year", models.IntegerField(blank=True, null=True)),
                ("end_year", models.IntegerField(blank=True, null=True)),
                ("exp", models.IntegerField(blank=True, null=True)),
                ("games", models.IntegerField(blank=True, null=True)),
                ("wins", models.IntegerField(blank=True, null=True)),
                ("losses", models.IntegerField(blank=True, null=True)),
                ("ties", models.IntegerField(blank=True, null=True)),
                ("win_pct", models.FloatField(blank=True, null=True)),
                ("playoff_exp", models.IntegerField(blank=True, null=True)),
                ("playoff_games", models.IntegerField(blank=True, null=True)),
                ("playoff_wins", models.IntegerField(blank=True, null=True)),
                ("playoff_losses", models.IntegerField(blank=True, null=True)),
                ("playoff_win_pct", models.FloatField(blank=True, null=True)),
                ("avg_division_finish", models.FloatField(blank=True, null=True)),
                ("best_division_finish", models.IntegerField(blank=True, null=True)),
                ("conference_champs", models.IntegerField(blank=True, null=True)),
                ("world_champs", models.IntegerField(blank=True, null=True)),
                ("super_bowls", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "coaches",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoAdminLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("action_time", models.DateTimeField()),
                ("object_id", models.TextField(blank=True, null=True)),
                ("object_repr", models.CharField(max_length=200)),
                ("action_flag", models.SmallIntegerField()),
                ("change_message", models.TextField()),
            ],
            options={
                "db_table": "django_admin_log",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoContentType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("app_label", models.CharField(max_length=100)),
                ("model", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "django_content_type",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoMigrations",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("app", models.CharField(max_length=255)),
                ("name", models.CharField(max_length=255)),
                ("applied", models.DateTimeField()),
            ],
            options={
                "db_table": "django_migrations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoSession",
            fields=[
                (
                    "session_key",
                    models.CharField(max_length=40, primary_key=True, serialize=False),
                ),
                ("session_data", models.TextField()),
                ("expire_date", models.DateTimeField()),
            ],
            options={
                "db_table": "django_session",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="EligiblePlayer",
            fields=[
                (
                    "seasonid",
                    models.CharField(
                        db_column="seasonID", primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(blank=True, null=True)),
                ("position", models.CharField(blank=True, null=True)),
                ("age", models.IntegerField(blank=True, null=True)),
                ("season", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "eligible_players",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Game",
            fields=[
                (
                    "gameid",
                    models.CharField(
                        db_column="gameID", primary_key=True, serialize=False
                    ),
                ),
                ("datetime", models.DateTimeField(blank=True, null=True)),
                ("playoff", models.BooleanField(blank=True, null=True)),
                ("week", models.IntegerField(blank=True, null=True)),
                ("home_team", models.CharField(blank=True, null=True)),
                ("home_team_code", models.CharField(blank=True, null=True)),
                ("away_team", models.CharField(blank=True, null=True)),
                ("away_team_code", models.CharField(blank=True, null=True)),
                ("home_coach", models.CharField(blank=True, null=True)),
                ("away_coach", models.CharField(blank=True, null=True)),
                ("stadium", models.CharField(blank=True, null=True)),
                ("attendance", models.IntegerField(blank=True, null=True)),
                ("h1q_pts", models.IntegerField(blank=True, null=True)),
                ("h2q_pts", models.IntegerField(blank=True, null=True)),
                ("h3q_pts", models.IntegerField(blank=True, null=True)),
                ("h4q_pts", models.IntegerField(blank=True, null=True)),
                ("h_ot_pts", models.IntegerField(blank=True, null=True)),
                ("hfinal_pts", models.IntegerField(blank=True, null=True)),
                ("a1q_pts", models.IntegerField(blank=True, null=True)),
                ("a2q_pts", models.IntegerField(blank=True, null=True)),
                ("a3q_pts", models.IntegerField(blank=True, null=True)),
                ("a4q_pts", models.IntegerField(blank=True, null=True)),
                ("a_ot_pts", models.IntegerField(blank=True, null=True)),
                ("afinal_pts", models.IntegerField(blank=True, null=True)),
                ("toss_winner", models.CharField(blank=True, null=True)),
                ("toss_deferred", models.BooleanField(blank=True, null=True)),
                ("favored_team", models.CharField(blank=True, null=True)),
                ("favored_by", models.FloatField(blank=True, null=True)),
                ("over_under", models.FloatField(blank=True, null=True)),
                ("head_ref", models.CharField(blank=True, null=True)),
                ("total_game_time", models.CharField(blank=True, null=True)),
                ("day_of_week", models.CharField(blank=True, null=True)),
                ("home_yards", models.IntegerField(blank=True, null=True)),
                ("home_pass_att", models.IntegerField(blank=True, null=True)),
                ("home_pass_yds", models.IntegerField(blank=True, null=True)),
                ("home_rush_att", models.IntegerField(blank=True, null=True)),
                ("home_rush_yds", models.IntegerField(blank=True, null=True)),
                ("home_fds", models.IntegerField(blank=True, null=True)),
                ("home_int", models.IntegerField(blank=True, null=True)),
                ("home_fum", models.IntegerField(blank=True, null=True)),
                ("home_fum_lost", models.IntegerField(blank=True, null=True)),
                ("home_penalties", models.IntegerField(blank=True, null=True)),
                ("home_penalty_yds", models.IntegerField(blank=True, null=True)),
                ("home_third_down_conv", models.IntegerField(blank=True, null=True)),
                ("home_third_down_att", models.IntegerField(blank=True, null=True)),
                ("home_fourth_down_conv", models.IntegerField(blank=True, null=True)),
                ("home_fourth_down_att", models.IntegerField(blank=True, null=True)),
                ("home_top", models.CharField(blank=True, null=True)),
                ("away_yards", models.IntegerField(blank=True, null=True)),
                ("away_pass_att", models.IntegerField(blank=True, null=True)),
                ("away_pass_yds", models.IntegerField(blank=True, null=True)),
                ("away_rush_att", models.IntegerField(blank=True, null=True)),
                ("away_rush_yds", models.IntegerField(blank=True, null=True)),
                ("away_fds", models.IntegerField(blank=True, null=True)),
                ("away_int", models.IntegerField(blank=True, null=True)),
                ("away_fum", models.IntegerField(blank=True, null=True)),
                ("away_fum_lost", models.IntegerField(blank=True, null=True)),
                ("away_penalties", models.IntegerField(blank=True, null=True)),
                ("away_penalty_yds", models.IntegerField(blank=True, null=True)),
                ("away_third_down_conv", models.IntegerField(blank=True, null=True)),
                ("away_third_down_att", models.IntegerField(blank=True, null=True)),
                ("away_fourth_down_conv", models.IntegerField(blank=True, null=True)),
                ("away_fourth_down_att", models.IntegerField(blank=True, null=True)),
                ("away_top", models.CharField(blank=True, null=True)),
                ("season", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "games",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="GameLink",
            fields=[
                ("season", models.IntegerField(blank=True, null=True)),
                ("week", models.IntegerField(blank=True, null=True)),
                ("game_link", models.CharField(primary_key=True, serialize=False)),
                ("game_id", models.CharField(blank=True, null=True)),
            ],
            options={
                "db_table": "game_links",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="PlayerBio",
            fields=[
                (
                    "playerid",
                    models.CharField(
                        db_column="playerID", primary_key=True, serialize=False
                    ),
                ),
                ("birth_year", models.IntegerField(blank=True, null=True)),
                ("first_name", models.CharField(blank=True, null=True)),
                ("last_name", models.CharField(blank=True, null=True)),
            ],
            options={
                "db_table": "player_bios",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="PlayerGameLog",
            fields=[
                (
                    "playerid",
                    models.OneToOneField(
                        db_column="playerID",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="analyzer.playerbio",
                    ),
                ),
                ("gameid", models.CharField(db_column="gameID")),
                ("date", models.DateField(blank=True, null=True)),
                ("game", models.IntegerField(blank=True, null=True)),
                ("week", models.IntegerField(blank=True, null=True)),
                ("team", models.CharField(blank=True, null=True)),
                ("game_location", models.CharField(blank=True, null=True)),
                ("opp", models.CharField(blank=True, null=True)),
                ("result", models.CharField(blank=True, null=True)),
                ("team_pts", models.IntegerField(blank=True, null=True)),
                ("opp_pts", models.IntegerField(blank=True, null=True)),
                ("gs", models.BooleanField(blank=True, null=True)),
                ("cmp", models.IntegerField(blank=True, null=True)),
                ("att", models.IntegerField(blank=True, null=True)),
                ("pass_yds", models.IntegerField(blank=True, null=True)),
                ("pass_tds", models.IntegerField(blank=True, null=True)),
                ("ints", models.IntegerField(blank=True, null=True)),
                ("qbr", models.FloatField(blank=True, null=True)),
                ("sacked_qty", models.IntegerField(blank=True, null=True)),
                ("sacked_yds", models.IntegerField(blank=True, null=True)),
                ("rush_att", models.IntegerField(blank=True, null=True)),
                ("rush_yds", models.IntegerField(blank=True, null=True)),
                ("rush_td", models.IntegerField(blank=True, null=True)),
                ("targets", models.IntegerField(blank=True, null=True)),
                ("receptions", models.IntegerField(blank=True, null=True)),
                ("rec_yds", models.IntegerField(blank=True, null=True)),
                ("rec_td", models.IntegerField(blank=True, null=True)),
                ("xp_made", models.IntegerField(blank=True, null=True)),
                ("xp_att", models.IntegerField(blank=True, null=True)),
                ("fg_made", models.IntegerField(blank=True, null=True)),
                ("fg_att", models.IntegerField(blank=True, null=True)),
                ("fumbles", models.IntegerField(blank=True, null=True)),
                ("fumbles_lost", models.IntegerField(blank=True, null=True)),
                ("snap_count", models.IntegerField(blank=True, null=True)),
                ("snap_pct", models.FloatField(blank=True, null=True)),
                ("total_td", models.IntegerField(blank=True, null=True)),
                ("two_pt_cons", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "player_game_logs",
                "managed": False,
            },
        ),
    ]
